/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 4>, <&to 4>;
        };

        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <55 56 57 72 73 74 75 76 77 78 79 63 32 44 62 32 33 40 41 42 43 44 45 60 5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 58 59 60 61 62 63 69 70 71 52 53 54>;
            flavor = "balanced";
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71 55 56 57 72 73 74>;
            flavor = "balanced";
        };

        ctrlc: ctrl_c {
            compatible = "zmk,behavior-tap-dance";
            label = "CTRL_C";
            #binding-cells = <0>;
            bindings = <&kp LC(C)>, <&kp LC(LS(C))>;
        };

        ctrlv: ctrl_v {
            compatible = "zmk,behavior-tap-dance";
            label = "CTRL_V";
            #binding-cells = <0>;
            bindings = <&kp LC(V)>, <&kp LC(LS(V))>;
        };

        ctrlf: ctrl_f {
            compatible = "zmk,behavior-tap-dance";
            label = "CTRL_F";
            #binding-cells = <0>;
            bindings = <&kp LC(F)>, <&kp LC(LS(F))>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        to_nav_and_left: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 3 &kp LEFT_ARROW>;
            label = "NEW_MACRO";
        };

        to_nav_and_right: to_nav_and_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 3 &kp RIGHT_ARROW>;
            label = "TO_NAV_AND_RIGHT";
        };

        to_nav_and_up: to_nav_and_top {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 3 &kp UP_ARROW>;
            label = "TO_NAV_AND_TOP";
        };

        to_nav_and_down: to_nav_and_down {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 3 &kp DOWN_ARROW>;
            label = "TO_NAV_AND_DOWN";
        };
    };

    combos {
        compatible = "zmk,combos";

        to_nav_and_left {
            bindings = <&to_nav_and_left>;
            key-positions = <38 40>;
        };

        to_nav_and_up {
            bindings = <&to_nav_and_up>;
            key-positions = <38 41>;
        };

        to_nav_and_down {
            bindings = <&to_nav_and_down>;
            key-positions = <38 42>;
        };

        to_nav_and_right {
            bindings = <&to_nav_and_right>;
            key-positions = <38 43>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1      &kp F2           &kp F3            &kp F4                &kp F5                                                                                                     &kp F6           &kp F7                 &kp F8             &kp F9            &kp F10
&kp EQUAL   &kp BACKSPACE    &kp LESS_THAN     &kp STAR              &kp N4             &kp N5                                                                          &kp N6  &kp N7           &kp PERCENT            &kp GREATER_THAN   &kp BACKSPACE     &kp MINUS
&kp TAB     &kp W            &kp L             &kp Y                 &kp P              &kp B                                                                           &kp Z   &kp F            &kp O                  &kp U              &kp APOSTROPHE    &kp BSLH
&caps_word  &hml LEFT_GUI C  &hml LEFT_ALT R   &hml LCTRL S          &hml LEFT_SHIFT T  &kp G                                                                           &kp M   &hmr RSHIFT N    &hmr RCTRL E           &hmr LEFT_ALT I    &hmr RIGHT_GUI A  &kp SQT
&kp GRAVE   &kp Q            &kp J             &kp V                 &lt 2 D            &kp K   &kp TAB      &kp LCTRL  &trans     &kp LGUI  &kp RCTRL  &sk LEFT_SHIFT  &kp X   &kp H            &kp COMMA              &kp DOT            &kp SEMICOLON     &kp PG_UP
&mo 4       &kp HOME         &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS  &kp LEFT_BRACE             &lt 1 SPACE  &kp ESC    &kp TAB    &kp RALT  &kp RET    &mo 2                   &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp RBKT          &kp PG_DN
            >;
        };

        symbols {
            bindings = <
&trans  &trans      &trans     &trans     &trans                                                                                       &trans            &trans             &trans          &trans            &trans
&trans  &trans      &trans     &trans     &trans     &trans                                                             &trans         &trans            &trans             &trans          &trans            &trans
&trans  &kp LC(A)   &kp LC(X)  &ctrlc     &ctrlv     &ctrlf                                                             &kp GRAVE      &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &kp UNDERSCORE  &kp TILDE         &trans
&trans  &kp DOLLAR  &kp EXCL   &kp QMARK  &kp COLON  &kp LC(Z)                                                          &kp LESS_THAN  &kp EQUAL         &kp SLASH          &kp MINUS       &kp GREATER_THAN  &trans
&trans  &trans      &kp TILDE  &kp HASH   &kp AT     &kp LC(LS(Z))  &trans  &trans  &trans    &trans  &trans  &kp BSLH  &trans         &kp AMPERSAND     &kp PIPE           &kp PLUS        &trans            &trans
&trans  &trans      &trans     &trans     &trans                    &trans  &trans  &trans    &trans  &trans  &kp DEL                  &trans            &trans             &trans          &trans            &trans
            >;
        };

        numbers {
            bindings = <
&trans  &trans        &trans            &trans         &trans                                                                                                  &trans        &trans              &trans           &trans  &trans
&trans  &trans        &trans            &trans         &trans              &trans                                                              &trans          &trans        &trans              &trans           &trans  &trans
&trans  &trans        &trans            &kp PLUS       &kp STAR            &kp EQUAL                                                           &kp N5          &kp N6        &kp N7              &kp N8           &trans  &trans
&trans  &hml LGUI N0  &hml LEFT_ALT N1  &hml LCTRL N2  &hml LEFT_SHIFT N3  &kp N4                                                              &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW      &kp RIGHT_ARROW  &kp N9  &trans
&trans  &trans        &trans            &kp MINUS      &kp SLASH           &trans     &trans  &trans         &trans    &trans  &trans  &trans  &trans          &kp HOME      &kp END             &trans           &trans  &trans
&trans  &trans        &trans            &trans         &trans                         &trans  &kp BACKSPACE  &trans    &trans  &trans  &trans                  &trans        &kp K_CONTEXT_MENU  &trans           &trans  &trans
            >;
        };

        navigation {
            bindings = <
&trans  &trans  &trans     &trans           &trans                                                                              &trans    &trans    &trans     &trans  &trans
&trans  &trans  &trans     &trans           &trans          &trans                                                    &trans    &trans    &trans    &trans     &trans  &trans
&trans  &trans  &trans     &trans           &trans          &trans                                                    &trans    &trans    &trans    &trans     &trans  &trans
&trans  &trans  &trans     &kp RIGHT_BRACE  &kp LEFT_BRACE  &trans                                                    &kp LEFT  &kp UP    &kp DOWN  &kp RIGHT  &trans  &trans
&trans  &trans  &kp LSHFT  &kp LCTRL        &trans          &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans    &kp HOME  &kp END   &trans     &trans  &trans
&trans  &trans  &trans     &trans           &trans                  &to 0   &to 0   &trans    &trans  &trans  &trans            &trans    &trans    &trans     &trans  &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                       &none       &none  &none  &none  &none
&none        &none            &none            &none            &none            &none                                                               &none  &none       &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                     &none  &none       &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                     &none  &bt BT_NXT  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none           &none  &none  &none  &none  &none       &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB    &none  &none  &none         &none       &none  &none  &none  &none
            >;
        };
    };
};
